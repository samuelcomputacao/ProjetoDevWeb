{"ast":null,"code":"var _jsxFileName = \"/home/samuel/Documentos/repositorios/ProjetoDevWeb/frontend/src/protected/components/FormUsuario/index.js\";\nimport React, { useState } from 'react';\nimport { notificarErro, notificarSucesso } from '../Notificacao/index';\nimport useHistory from 'react-router-dom';\nimport api from '../../../service/api';\nimport { Form, Input, Button, Select, Divider } from 'antd';\nimport Titulo from '../Titulo';\nimport { Redirect } from 'react-router-dom';\n\nfunction FormUsuario({\n  atualizar\n}) {\n  const [categorias, setCategorias] = useState(['Funcionario', 'Cliente']);\n  const [usuario, setUsuario] = useState({});\n  const [redirect, setRedirect] = useState(false);\n  const historico = useHistory(); // useEffect(() => {\n  //     async function carregaUsuarios() {\n  //         if (usuarioUpdate > 0)\n  //             try {\n  //                 const u = api.get(`/usuario/${usuarioUpdate}`);\n  //                 setUsuario(u);\n  //             } catch (e) {\n  //                 const { mensagem } = e.response.data;\n  //                 notificarErro(mensagem);\n  //             }\n  //     }\n  //     carregaUsuarios();\n  // }, []);\n\n  const cadastrarUsuario = async usuario => {\n    try {\n      await api.post('/usuario', {\n        usuario\n      });\n      notificarSucesso('O usuário foi cadastrado com sucesso.');\n      setTimeout(() => {\n        historico.goBack();\n      }, 200);\n    } catch (e) {\n      const {\n        mensagem\n      } = e.response.data;\n      notificarErro(mensagem);\n    }\n  };\n\n  const onFormLayoutChange = ({\n    size\n  }) => {\n    console.log('formChange');\n  };\n\n  const onFinish = async values => {\n    const {\n      nome,\n      funcao,\n      cpfCnpj,\n      senha,\n      confirmSenha\n    } = values;\n\n    if (senha !== confirmSenha) {\n      notificarErro('As senhas não são iguais');\n    } else {\n      const usuario = {\n        nome,\n        funcao,\n        cpfCnpj,\n        senha\n      };\n      cadastrarUsuario(usuario);\n    }\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const layout = {\n    labelCol: {\n      span: 5\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 5,\n      span: 16\n    }\n  };\n\n  if (redirect) {} else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, !atualizar && React.createElement(Titulo, {\n      nome: \"Cadastro de Usu\\xE1rios\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), atualizar && React.createElement(Titulo, {\n      nome: \"Atualizar Usu\\xE1rio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Form, Object.assign({}, layout, {\n      name: \"basic\",\n      initialValues: {\n        remember: true,\n        nome: usuario.nome,\n        funcao: usuario.funcao,\n        cpfCnpj: usuario.cpfCnpj\n      },\n      onFinish: onFinish,\n      onFinishFailed: onFinishFailed,\n      onValuesChange: onFormLayoutChange,\n      size: \"larger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Nome\",\n      name: \"nome\",\n      rules: [{\n        required: true,\n        message: 'O nome é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Cpf/Cnpj\",\n      name: \"cpfCnpj\",\n      rules: [{\n        required: true,\n        message: 'O CPF/Cnpj é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Fun\\xE7\\xE3o\",\n      name: \"funcao\",\n      rules: [{\n        required: true,\n        message: 'A Função é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Select, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, categorias.map(cat => {\n      return React.createElement(Select.Option, {\n        value: cat,\n        key: cat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, cat);\n    }))), React.createElement(Form.Item, {\n      label: \"Senha\",\n      name: \"senha\",\n      rules: [{\n        required: true,\n        message: 'A senha é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Confirma\\xE7\\xE3o\",\n      name: \"confirmSenha\",\n      rules: [{\n        required: true,\n        message: 'A confirmação da senha é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), atualizar && React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Atualizar\"), !atualizar && React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Salvar\"), React.createElement(Button, {\n      type: \"danger\",\n      href: \"/usuarios\",\n      style: {\n        marginLeft: '2px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Cancelar\"))));\n  }\n}\n\nexport default FormUsuario;","map":{"version":3,"sources":["/home/samuel/Documentos/repositorios/ProjetoDevWeb/frontend/src/protected/components/FormUsuario/index.js"],"names":["React","useState","notificarErro","notificarSucesso","useHistory","api","Form","Input","Button","Select","Divider","Titulo","Redirect","FormUsuario","atualizar","categorias","setCategorias","usuario","setUsuario","redirect","setRedirect","historico","cadastrarUsuario","post","setTimeout","goBack","e","mensagem","response","data","onFormLayoutChange","size","console","log","onFinish","values","nome","funcao","cpfCnpj","senha","confirmSenha","onFinishFailed","errorInfo","layout","labelCol","span","wrapperCol","tailLayout","offset","remember","required","message","map","cat","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { notificarErro, notificarSucesso } from '../Notificacao/index';\nimport useHistory from 'react-router-dom';\nimport api from '../../../service/api';\nimport {\n    Form,\n    Input,\n    Button,\n    Select,\n    Divider\n} from 'antd';\nimport Titulo from '../Titulo';\nimport { Redirect } from 'react-router-dom';\n\nfunction FormUsuario({ atualizar }) {\n\n    const [categorias, setCategorias] = useState(['Funcionario', 'Cliente']);\n    const [usuario, setUsuario] = useState({});\n    const [redirect, setRedirect] = useState(false);\n\n    const historico = useHistory();\n\n    // useEffect(() => {\n    //     async function carregaUsuarios() {\n    //         if (usuarioUpdate > 0)\n    //             try {\n    //                 const u = api.get(`/usuario/${usuarioUpdate}`);\n    //                 setUsuario(u);\n    //             } catch (e) {\n    //                 const { mensagem } = e.response.data;\n    //                 notificarErro(mensagem);\n    //             }\n\n    //     }\n    //     carregaUsuarios();\n    // }, []);\n\n    const cadastrarUsuario = async (usuario) => {\n        try {\n            await api.post('/usuario', { usuario });\n            notificarSucesso('O usuário foi cadastrado com sucesso.');\n            setTimeout(() => {\n                historico.goBack();\n            }, 200);\n        } catch (e) {\n            const { mensagem } = e.response.data;\n            notificarErro(mensagem);\n        }\n\n    }\n\n\n    const onFormLayoutChange = ({ size }) => {\n        console.log('formChange');\n    };\n\n    const onFinish = async (values) => {\n\n        const { nome, funcao, cpfCnpj, senha, confirmSenha } = values;\n\n        if (senha !== confirmSenha) {\n            notificarErro('As senhas não são iguais');\n        } else {\n\n            const usuario = {\n                nome,\n                funcao,\n                cpfCnpj,\n                senha\n            };\n            cadastrarUsuario(usuario);\n        }\n    };\n\n\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const layout = {\n        labelCol: {\n            span: 5,\n        },\n        wrapperCol: {\n            span: 16,\n        },\n    };\n    const tailLayout = {\n        wrapperCol: {\n            offset: 5,\n            span: 16,\n        },\n    };\n    if (redirect) {\n\n    } else {\n        return (\n            <div>\n                {!atualizar && <Titulo nome=\"Cadastro de Usuários\" />}\n                {atualizar && <Titulo nome=\"Atualizar Usuário\" />}\n                <Divider />\n                <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={{\n                        remember: true,\n                        nome: usuario.nome,\n                        funcao: usuario.funcao,\n                        cpfCnpj: usuario.cpfCnpj\n                    }}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    onValuesChange={onFormLayoutChange}\n                    size='larger'>\n                    <Form.Item\n                        label='Nome'\n                        name=\"nome\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'O nome é obrigatorio!'\n                            }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label='Cpf/Cnpj'\n                        name=\"cpfCnpj\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'O CPF/Cnpj é obrigatorio!'\n                            }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label='Função'\n                        name=\"funcao\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'A Função é obrigatoria!',\n                            }]}\n                    >\n                        <Select>\n                            {\n                                categorias.map((cat) => {\n                                    return (<Select.Option value={cat} key={cat}>{cat}</Select.Option>)\n                                })\n                            }\n                        </Select>\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Senha'\n                        name=\"senha\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'A senha é obrigatoria!'\n                            }]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Confirmação'\n                        name=\"confirmSenha\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'A confirmação da senha é obrigatoria!'\n                            }]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n\n                    <Form.Item {...tailLayout}>\n                        {atualizar &&\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\">\n\n                                Atualizar\n                    </Button>\n                        }\n                        {!atualizar &&\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\">\n                                Salvar\n                    </Button>\n                        }\n                        <Button\n                            type=\"danger\"\n                            href=\"/usuarios\"\n                            style={{ marginLeft: '2px' }}\n                        >\n                            Cancelar\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default FormUsuario;"]},"metadata":{},"sourceType":"module"}