{"ast":null,"code":"var _jsxFileName = \"/home/samuel/Documentos/repositorios/ProjetoDevWeb/frontend/src/protected/components/FormUsuario/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { notificarErro, notificarSucesso } from '../Notificacao/index';\nimport api from '../../../service/api';\nimport { Form, Button, Select, Input, Divider, Avatar } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { useHistory } from 'react-router-dom';\n\nfunction FormUsuario({\n  atualizar,\n  keyUsuario,\n  tipoUsuario\n}) {\n  const [usuario, setUsuario] = useState({});\n  const [carregado, setCarregado] = useState(false);\n  const [loadingSalvar, setLoadingSalvar] = useState(false);\n  const [loadingAtualizar, setloadingAtualizar] = useState(false);\n  const [linkAvatar, setLinkAvatar] = useState('');\n  const categorias = ['FUNCIONARIO', 'CLIENTE'];\n  const history = useHistory();\n  useEffect(() => {\n    async function buscaUsuario() {\n      if (atualizar) {\n        if (keyUsuario) {\n          try {\n            const {\n              data\n            } = await api.get(`/usuario/${keyUsuario}`);\n            await setUsuario(data);\n            setCarregado(true);\n          } catch (e) {}\n        }\n      }\n    }\n\n    buscaUsuario();\n  }, [atualizar, keyUsuario, tipoUsuario]);\n\n  const cadastrarUsuario = async usuario => {\n    setLoadingSalvar(true);\n    const {\n      nome,\n      cpfCnpj,\n      senha,\n      funcao,\n      tipoUsuario,\n      avatar\n    } = usuario;\n\n    try {\n      await api.post('/usuario', {\n        nome,\n        funcao,\n        cpfCnpj,\n        senha,\n        tipoUsuario,\n        avatar\n      });\n      notificarSucesso('O usuário foi cadastrado com sucesso.');\n      setLoadingSalvar(false);\n      setTimeout(() => {\n        history.push('/usuarios');\n      }, 200);\n    } catch (e) {\n      const {\n        mensagem\n      } = e.response.data;\n      notificarErro(mensagem);\n      setLoadingSalvar(false);\n    }\n  };\n\n  const editarUsuario = async usuario => {\n    setloadingAtualizar(true);\n    const {\n      nome,\n      funcao,\n      senha\n    } = usuario;\n\n    try {\n      await api.put(`/usuario/${usuario.key}`, {\n        nome,\n        funcao,\n        senha\n      });\n      notificarSucesso('O usuário foi atualizado com sucesso.');\n      setloadingAtualizar(false);\n      setTimeout(() => {\n        history.push('/usuarios');\n      }, 200);\n    } catch (e) {\n      const {\n        mensagem\n      } = e.response.data;\n      notificarErro(mensagem);\n      setloadingAtualizar(false);\n    }\n  };\n\n  const onFinish = async values => {\n    const {\n      nome,\n      funcao,\n      cpfCnpj,\n      senha,\n      confirmSenha,\n      avatar\n    } = values;\n\n    if (senha !== confirmSenha) {\n      notificarErro('As senhas não são iguais');\n    } else {\n      const usuarioC = {\n        nome,\n        funcao,\n        cpfCnpj,\n        senha,\n        tipoUsuario,\n        avatar\n      };\n      cadastrarUsuario(usuarioC);\n    }\n  };\n\n  const onFinishEdit = async values => {\n    setloadingAtualizar(true);\n    const {\n      nome,\n      funcao,\n      cpfCnpj,\n      senha\n    } = values;\n\n    if (nome && funcao && cpfCnpj) {\n      const usuarioEdit = {\n        nome,\n        funcao,\n        senha,\n        key: usuario.key\n      };\n      editarUsuario(usuarioEdit);\n    }\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const layout = {\n    labelCol: {\n      span: 5\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 5,\n      span: 16\n    }\n  };\n\n  const validarCpfCnpj = value => {\n    const regexCpf = '^[0-9]{3}[.][0-9]{3}[.][0-9]{3}[-][0-9]{2}$';\n    const regexCnpj = '^[0-9]{3}[.][0-9]{3}[.][0-9]{3}[/][0-9]{4}[-][0-9]{2}$';\n\n    if (value) {\n      if (tipoUsuario === 0) {\n        if (value.match(regexCpf)) {\n          return Promise.resolve();\n        } else {\n          return Promise.reject('O CPF não se encontra no formato: xxx.xxx.xxx-xx');\n        }\n      } else if (tipoUsuario === 1) {\n        if (value.match(regexCnpj)) {\n          return Promise.resolve();\n        } else {\n          return Promise.reject('O Cnpj não se encontra no formato: xxx.xxx.xxx/xxxx-xx');\n        }\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  if (carregado) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Form, Object.assign({}, layout, {\n      name: \"basic\",\n      initialValues: {\n        remember: true,\n        nome: usuario.nome,\n        funcao: usuario.funcao,\n        cpfCnpj: usuario.cpfCnpj,\n        avatar: usuario.avatar\n      },\n      onFinish: onFinishEdit,\n      onFinishFailed: onFinishFailed,\n      size: \"larger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Nome\",\n      name: \"nome\",\n      rules: [{\n        required: true,\n        message: 'O nome é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: tipoUsuario === 0 ? 'Cpf' : 'Cnpj',\n      name: \"cpfCnpj\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Input, {\n      readOnly: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Fun\\xE7\\xE3o\",\n      name: \"funcao\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Select, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, categorias.map(cat => {\n      return React.createElement(Select.Option, {\n        value: cat,\n        key: cat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, cat);\n    }))), React.createElement(Form.Item, {\n      label: \"Senha\",\n      name: \"senha\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Confirma\\xE7\\xE3o\",\n      name: \"confirmSenha\",\n      rules: [({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (!value && !getFieldValue('senha')) {\n            return Promise.resolve();\n          } else if (getFieldValue('senha') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('As senhas não são iguais!');\n        }\n\n      })],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Link Avatar\",\n      name: \"avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Input, {\n      onChange: event => {\n        setLinkAvatar(event.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Previa Avatar\",\n      name: \"previaAvatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, linkAvatar && React.createElement(Avatar, {\n      size: 100,\n      src: linkAvatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), !linkAvatar && React.createElement(Avatar, {\n      size: 100,\n      icon: React.createElement(UserOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: loadingAtualizar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Atualizar\"), React.createElement(Button, {\n      type: \"danger\",\n      href: \"/usuarios\",\n      style: {\n        marginLeft: '2px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Cancelar\"))));\n  } else {\n    return React.createElement(Form, Object.assign({}, layout, {\n      name: \"basic\",\n      initialValues: {\n        remember: true\n      },\n      onFinish: onFinish,\n      onFinishFailed: onFinishFailed,\n      size: \"larger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Nome\",\n      name: \"nome\",\n      rules: [{\n        required: true,\n        message: 'O nome é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: \"nomeId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: tipoUsuario === 0 ? 'Cpf' : 'Cnpj',\n      name: \"cpfCnpj\",\n      rules: [{\n        required: true,\n        message: `O ${tipoUsuario === 0 ? 'Cpf' : 'Cnpj'} é obrigatorio!`\n      }, () => ({\n        validator(_, value) {\n          return validarCpfCnpj(value);\n        }\n\n      })],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Fun\\xE7\\xE3o\",\n      name: \"funcao\",\n      rules: [{\n        required: true,\n        message: 'A Função é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(Select, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, categorias.map(cat => {\n      return React.createElement(Select.Option, {\n        value: cat,\n        key: cat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, cat);\n    }))), React.createElement(Form.Item, {\n      label: \"Senha\",\n      name: \"senha\",\n      rules: [{\n        required: true,\n        message: 'A senha é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Confirma\\xE7\\xE3o\",\n      name: \"confirmSenha\",\n      rules: [{\n        required: true,\n        message: 'A confirmação da senha é obrigatoria!'\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (!value || getFieldValue('senha') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('As senhas não são iguais!');\n        }\n\n      })],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: loadingSalvar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"Salvar\"), React.createElement(Button, {\n      type: \"danger\",\n      href: \"/usuarios\",\n      style: {\n        marginLeft: '2px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"Cancelar\")));\n  }\n}\n\nexport default FormUsuario;","map":{"version":3,"sources":["/home/samuel/Documentos/repositorios/ProjetoDevWeb/frontend/src/protected/components/FormUsuario/index.js"],"names":["React","useState","useEffect","notificarErro","notificarSucesso","api","Form","Button","Select","Input","Divider","Avatar","UserOutlined","useHistory","FormUsuario","atualizar","keyUsuario","tipoUsuario","usuario","setUsuario","carregado","setCarregado","loadingSalvar","setLoadingSalvar","loadingAtualizar","setloadingAtualizar","linkAvatar","setLinkAvatar","categorias","history","buscaUsuario","data","get","e","cadastrarUsuario","nome","cpfCnpj","senha","funcao","avatar","post","setTimeout","push","mensagem","response","editarUsuario","put","key","onFinish","values","confirmSenha","usuarioC","onFinishEdit","usuarioEdit","onFinishFailed","errorInfo","console","log","layout","labelCol","span","wrapperCol","tailLayout","offset","validarCpfCnpj","value","regexCpf","regexCnpj","match","Promise","resolve","reject","remember","required","message","map","cat","getFieldValue","validator","rule","event","target","marginLeft","_"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { notificarErro, notificarSucesso } from '../Notificacao/index';\nimport api from '../../../service/api';\nimport {\n    Form,\n    Button,\n    Select,\n    Input,\n    Divider,\n    Avatar\n} from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { useHistory } from 'react-router-dom';\n\nfunction FormUsuario({ atualizar, keyUsuario, tipoUsuario }) {\n\n    const [usuario, setUsuario] = useState({});\n    const [carregado, setCarregado] = useState(false);\n\n    const [loadingSalvar, setLoadingSalvar] = useState(false);\n    const [loadingAtualizar, setloadingAtualizar] = useState(false);\n\n    const [linkAvatar, setLinkAvatar] = useState('');\n\n    const categorias = ['FUNCIONARIO', 'CLIENTE'];\n    const history = useHistory();\n\n    useEffect(() => {\n        async function buscaUsuario() {\n            if (atualizar) {\n                if (keyUsuario) {\n                    try {\n                        const { data } = await api.get(`/usuario/${keyUsuario}`);\n                        await setUsuario(data);\n                        setCarregado(true);\n                    } catch (e) {\n\n                    }\n                }\n            }\n        }\n        buscaUsuario();\n    }, [atualizar, keyUsuario, tipoUsuario]);\n\n    const cadastrarUsuario = async (usuario) => {\n        setLoadingSalvar(true);\n        const { nome, cpfCnpj, senha, funcao, tipoUsuario,avatar } = usuario;\n        try {\n            await api.post('/usuario', { nome, funcao, cpfCnpj, senha, tipoUsuario, avatar});\n            notificarSucesso('O usuário foi cadastrado com sucesso.');\n            setLoadingSalvar(false);\n            setTimeout(() => {\n                history.push('/usuarios');\n            }, 200);\n        } catch (e) {\n            const { mensagem } = e.response.data;\n            notificarErro(mensagem);\n            setLoadingSalvar(false);\n        }\n    }\n\n    const editarUsuario = async (usuario) => {\n        setloadingAtualizar(true);\n        const { nome, funcao, senha } = usuario;\n        try {\n            await api.put(`/usuario/${usuario.key}`, { nome, funcao, senha });\n            notificarSucesso('O usuário foi atualizado com sucesso.');\n            setloadingAtualizar(false);\n            setTimeout(() => {\n                history.push('/usuarios');\n            }, 200);\n        } catch (e) {\n            const { mensagem } = e.response.data;\n            notificarErro(mensagem);\n            setloadingAtualizar(false);\n        }\n    }\n\n    const onFinish = async (values) => {\n\n        const { nome, funcao, cpfCnpj, senha, confirmSenha, avatar } = values;\n\n        if (senha !== confirmSenha) {\n            notificarErro('As senhas não são iguais');\n        } else {\n\n            const usuarioC = {\n                nome,\n                funcao,\n                cpfCnpj,\n                senha,\n                tipoUsuario,\n                avatar\n            };\n            cadastrarUsuario(usuarioC);\n        }\n    };\n\n    const onFinishEdit = async (values) => {\n        setloadingAtualizar(true);\n        const { nome, funcao, cpfCnpj, senha } = values;\n\n        if (nome && funcao && cpfCnpj) {\n            const usuarioEdit = {\n                nome,\n                funcao,\n                senha,\n                key: usuario.key\n            };\n            editarUsuario(usuarioEdit);\n        }\n\n    };\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const layout = {\n        labelCol: {\n            span: 5,\n        },\n        wrapperCol: {\n            span: 16,\n        },\n    };\n    const tailLayout = {\n        wrapperCol: {\n            offset: 5,\n            span: 16,\n        },\n    };\n\n    const validarCpfCnpj = (value) => {\n        const regexCpf = '^[0-9]{3}[.][0-9]{3}[.][0-9]{3}[-][0-9]{2}$';\n        const regexCnpj = '^[0-9]{3}[.][0-9]{3}[.][0-9]{3}[/][0-9]{4}[-][0-9]{2}$';\n\n        if (value) {\n            if (tipoUsuario === 0) {\n                if (value.match(regexCpf)) {\n                    return Promise.resolve();\n                } else {\n                    return Promise.reject('O CPF não se encontra no formato: xxx.xxx.xxx-xx');\n                }\n            } else if (tipoUsuario === 1) {\n                if (value.match(regexCnpj)) {\n                    return Promise.resolve();\n                } else {\n                    return Promise.reject('O Cnpj não se encontra no formato: xxx.xxx.xxx/xxxx-xx');\n                }\n            }\n        }\n        return Promise.resolve();\n    }\n\n    if (carregado) {\n        return (\n            <div>\n                <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={{\n                        remember: true,\n                        nome: usuario.nome,\n                        funcao: usuario.funcao,\n                        cpfCnpj: usuario.cpfCnpj,\n                        avatar: usuario.avatar\n                    }}\n                    onFinish={onFinishEdit}\n                    onFinishFailed={onFinishFailed}\n                    size='larger'>\n                    <Form.Item\n                        label='Nome'\n                        name=\"nome\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'O nome é obrigatorio!'\n                            }]}>\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label={tipoUsuario === 0 ? 'Cpf' : 'Cnpj'}\n                        name=\"cpfCnpj\"\n\n                    >\n                        <Input readOnly />\n                    </Form.Item>\n                    <Form.Item\n                        label='Função'\n                        name=\"funcao\"\n                    >\n                        <Select>\n                            {\n                                categorias.map((cat) => {\n                                    return (<Select.Option value={cat} key={cat}>{cat}</Select.Option>)\n                                })\n                            }\n                        </Select>\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Senha'\n                        name='senha'\n                    >\n                        <Input.Password />\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Confirmação'\n                        name=\"confirmSenha\"\n                        rules={[\n\n                            ({ getFieldValue }) => ({\n                                validator(rule, value) {\n                                    if (!value && !getFieldValue('senha')) {\n                                        return Promise.resolve();\n                                    } else if (getFieldValue('senha') === value) {\n                                        return Promise.resolve();\n                                    }\n\n                                    return Promise.reject('As senhas não são iguais!');\n                                },\n                            }),\n                        ]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Link Avatar'\n                        name=\"avatar\"\n                    >\n                        <Input onChange={(event) => {\n                            setLinkAvatar(event.target.value);\n                        }} />\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Previa Avatar'\n                        name=\"previaAvatar\"\n                    >{linkAvatar && <Avatar size={100} src={linkAvatar} />}\n                        {!linkAvatar && <Avatar size={100} icon={<UserOutlined />} />}\n                    </Form.Item>\n\n                    <Form.Item {...tailLayout}>\n                        <Divider />\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            loading={loadingAtualizar}\n                        >\n                            Atualizar\n                        </Button>\n\n                        <Button\n                            type=\"danger\"\n                            href=\"/usuarios\"\n                            style={{ marginLeft: '2px' }}\n                        >\n                            Cancelar\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>);\n    } else {\n\n        return (\n            <Form\n                {...layout}\n                name=\"basic\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                size='larger'>\n                <Form.Item\n                    label='Nome'\n                    name=\"nome\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'O nome é obrigatorio!'\n                        }]}\n                >\n                    <Input id='nomeId' />\n                </Form.Item>\n                <Form.Item\n                    label={tipoUsuario === 0 ? 'Cpf' : 'Cnpj'}\n                    name=\"cpfCnpj\"\n                    rules={[\n                        {\n                            required: true,\n                            message: `O ${tipoUsuario === 0 ? 'Cpf' : 'Cnpj'} é obrigatorio!`\n                        },\n                        () => ({\n                            validator(_, value) {\n                                return validarCpfCnpj(value);\n                            },\n                        }),\n\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item\n                    label='Função'\n                    name=\"funcao\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A Função é obrigatoria!',\n                        }]}\n                >\n                    <Select>\n                        {\n                            categorias.map((cat) => {\n                                return (<Select.Option value={cat} key={cat}>{cat}</Select.Option>)\n                            })\n                        }\n                    </Select>\n                </Form.Item>\n\n                <Form.Item\n                    label='Senha'\n                    name=\"senha\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A senha é obrigatoria!'\n                        }]}\n                >\n                    <Input.Password />\n                </Form.Item>\n\n                <Form.Item\n                    label='Confirmação'\n                    name=\"confirmSenha\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A confirmação da senha é obrigatoria!'\n                        },\n                        ({ getFieldValue }) => ({\n                            validator(rule, value) {\n                                if (!value || getFieldValue('senha') === value) {\n                                    return Promise.resolve();\n                                }\n\n                                return Promise.reject('As senhas não são iguais!');\n                            },\n                        }),\n                    ]}\n                >\n                    <Input.Password />\n                </Form.Item>\n                {/* <Form.Item\n                    label='Link Avatar'\n                    name=\"avatar\"\n                >\n                    <Input onChange={(event) => {\n                        setLinkAvatar(event.target.value);\n                    }} />\n                </Form.Item>\n\n                <Form.Item\n                    label='Previa Avatar'\n                    name=\"previaAvatar\"\n                >{linkAvatar && <Avatar size={100} src={linkAvatar} />}\n                    {!linkAvatar && <Avatar size={100} icon={<UserOutlined />} />}\n                </Form.Item> */}\n\n                <Form.Item {...tailLayout}>\n                    <Divider />\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        loading={loadingSalvar}\n                    >\n                        Salvar\n                    </Button>\n                    <Button\n                        type=\"danger\"\n                        href=\"/usuarios\"\n                        style={{ marginLeft: '2px' }}\n                    >\n                        Cancelar\n                        </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default FormUsuario;"]},"metadata":{},"sourceType":"module"}