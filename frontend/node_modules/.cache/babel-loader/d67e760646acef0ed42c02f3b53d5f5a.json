{"ast":null,"code":"var _jsxFileName = \"/home/samuel/Documentos/repositorios/ProjetoDevWeb/frontend/src/protected/components/FormUsuario/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { notificarErro, notificarSucesso } from '../Notificacao/index';\nimport api from '../../../service/api';\nimport { Form, Button, Select, Input } from 'antd';\nimport { Redirect } from 'react-router-dom';\n\nfunction FormUsuario({\n  atualizar,\n  location\n}) {\n  const categorias = ['Funcionario', 'Cliente'];\n  const [usuario, setUsuario] = useState({});\n  const [redirect, setRedirect] = useState(false);\n  const [carregado, setCarregado] = useState(false);\n  useEffect(() => {\n    async function buscaUsuario() {\n      const params = new URLSearchParams(location.search);\n      const k = params.get('key');\n\n      try {\n        const {\n          data\n        } = await api.get(`/usuario/${k}`);\n        setUsuario(data);\n        setCarregado(true);\n      } catch (e) {}\n    }\n\n    buscaUsuario();\n  }, [location]);\n\n  const cadastrarUsuario = async usuario => {\n    try {\n      await api.post('/usuario', {\n        usuario\n      });\n      notificarSucesso('O usuário foi cadastrado com sucesso.');\n      setTimeout(() => {\n        setRedirect(true);\n      }, 200);\n    } catch (e) {\n      const {\n        mensagem\n      } = e.response.data;\n      notificarErro(mensagem);\n    }\n  };\n\n  const onFormLayoutChange = ({\n    size\n  }) => {\n    console.log('formChange');\n  };\n\n  const onFinish = async values => {\n    const {\n      nome,\n      funcao,\n      cpfCnpj,\n      senha,\n      confirmSenha\n    } = values;\n\n    if (senha !== confirmSenha) {\n      notificarErro('As senhas não são iguais');\n    } else {\n      const usuario = {\n        nome,\n        funcao,\n        cpfCnpj,\n        senha\n      };\n      cadastrarUsuario(usuario);\n    }\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const layout = {\n    labelCol: {\n      span: 5\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 5,\n      span: 16\n    }\n  };\n\n  if (carregado) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Form, Object.assign({}, layout, {\n      name: \"basic\",\n      initialValues: {\n        remember: true,\n        nome: usuario.nome\n      },\n      onFinish: onFinish,\n      onFinishFailed: onFinishFailed,\n      onValuesChange: onFormLayoutChange,\n      size: \"larger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Nome\",\n      name: \"nome\",\n      rules: [{\n        required: true,\n        message: 'O nome é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: \"nomeId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Cpf/Cnpj\",\n      name: \"cpfCnpj\",\n      rules: [{\n        required: true,\n        message: 'O CPF/Cnpj é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Fun\\xE7\\xE3o\",\n      name: \"funcao\",\n      rules: [{\n        required: true,\n        message: 'A Função é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Select, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, categorias.map(cat => {\n      return React.createElement(Select.Option, {\n        value: cat,\n        key: cat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, cat);\n    }))), React.createElement(Form.Item, {\n      label: \"Senha\",\n      name: \"senha\",\n      rules: [{\n        required: true,\n        message: 'A senha é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Confirma\\xE7\\xE3o\",\n      name: \"confirmSenha\",\n      rules: [{\n        required: true,\n        message: 'A confirmação da senha é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), atualizar && React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Atualizar\"), !atualizar && React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Salvar\"), React.createElement(Button, {\n      type: \"danger\",\n      href: \"/usuarios\",\n      style: {\n        marginLeft: '2px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Cancelar\"))));\n  } else {\n    return React.createElement(Form, Object.assign({}, layout, {\n      name: \"basic\",\n      initialValues: {\n        remember: true\n      },\n      onFinish: onFinish,\n      onFinishFailed: onFinishFailed,\n      onValuesChange: onFormLayoutChange,\n      size: \"larger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Nome\",\n      name: \"nome\",\n      rules: [{\n        required: true,\n        message: 'O nome é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: \"nomeId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Cpf/Cnpj\",\n      name: \"cpfCnpj\",\n      rules: [{\n        required: true,\n        message: 'O CPF/Cnpj é obrigatorio!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Fun\\xE7\\xE3o\",\n      name: \"funcao\",\n      rules: [{\n        required: true,\n        message: 'A Função é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Select, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, categorias.map(cat => {\n      return React.createElement(Select.Option, {\n        value: cat,\n        key: cat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, cat);\n    }))), React.createElement(Form.Item, {\n      label: \"Senha\",\n      name: \"senha\",\n      rules: [{\n        required: true,\n        message: 'A senha é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Confirma\\xE7\\xE3o\",\n      name: \"confirmSenha\",\n      rules: [{\n        required: true,\n        message: 'A confirmação da senha é obrigatoria!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })), React.createElement(Form.Item, Object.assign({}, tailLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), atualizar && React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Atualizar\"), !atualizar && React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Salvar\"), React.createElement(Button, {\n      type: \"danger\",\n      href: \"/usuarios\",\n      style: {\n        marginLeft: '2px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Cancelar\")));\n  }\n}\n\nexport default FormUsuario;","map":{"version":3,"sources":["/home/samuel/Documentos/repositorios/ProjetoDevWeb/frontend/src/protected/components/FormUsuario/index.js"],"names":["React","useState","useEffect","notificarErro","notificarSucesso","api","Form","Button","Select","Input","Redirect","FormUsuario","atualizar","location","categorias","usuario","setUsuario","redirect","setRedirect","carregado","setCarregado","buscaUsuario","params","URLSearchParams","search","k","get","data","e","cadastrarUsuario","post","setTimeout","mensagem","response","onFormLayoutChange","size","console","log","onFinish","values","nome","funcao","cpfCnpj","senha","confirmSenha","onFinishFailed","errorInfo","layout","labelCol","span","wrapperCol","tailLayout","offset","remember","required","message","map","cat","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { notificarErro, notificarSucesso } from '../Notificacao/index';\nimport api from '../../../service/api';\nimport {\n    Form,\n    Button,\n    Select,\n    Input\n} from 'antd';\nimport { Redirect } from 'react-router-dom';\n\nfunction FormUsuario({ atualizar, location }) {\n\n    const categorias = ['Funcionario', 'Cliente'];\n    const [usuario, setUsuario] = useState({});\n    const [redirect, setRedirect] = useState(false);\n    const [carregado, setCarregado] = useState(false);\n\n    useEffect(() => {\n        async function buscaUsuario() {\n            const params = new URLSearchParams(location.search);\n            const k = params.get('key');\n            try {\n                const { data } = await api.get(`/usuario/${k}`);\n                setUsuario(data);\n                setCarregado(true);\n            } catch (e) {\n\n            }\n        }\n        buscaUsuario();\n    }, [location]);\n\n\n    const cadastrarUsuario = async (usuario) => {\n        try {\n            await api.post('/usuario', { usuario });\n            notificarSucesso('O usuário foi cadastrado com sucesso.');\n            setTimeout(() => {\n                setRedirect(true);\n            }, 200);\n        } catch (e) {\n            const { mensagem } = e.response.data;\n            notificarErro(mensagem);\n        }\n\n    }\n\n\n    const onFormLayoutChange = ({ size }) => {\n        console.log('formChange');\n    };\n\n    const onFinish = async (values) => {\n\n        const { nome, funcao, cpfCnpj, senha, confirmSenha } = values;\n\n        if (senha !== confirmSenha) {\n            notificarErro('As senhas não são iguais');\n        } else {\n\n            const usuario = {\n                nome,\n                funcao,\n                cpfCnpj,\n                senha\n            };\n            cadastrarUsuario(usuario);\n        }\n    };\n\n\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const layout = {\n        labelCol: {\n            span: 5,\n        },\n        wrapperCol: {\n            span: 16,\n        },\n    };\n    const tailLayout = {\n        wrapperCol: {\n            offset: 5,\n            span: 16,\n        },\n    };\n    if (carregado) {\n        return (\n            <div>\n            <Form\n                {...layout}\n                name=\"basic\"\n                initialValues={{\n                    remember: true,\n                    nome:usuario.nome\n                 }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                onValuesChange={onFormLayoutChange}\n                size='larger'>\n                <Form.Item\n                    label='Nome'\n                    name=\"nome\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'O nome é obrigatorio!'\n                        }]}\n                >\n                    <Input id='nomeId' />\n                </Form.Item>\n                <Form.Item\n                    label='Cpf/Cnpj'\n                    name=\"cpfCnpj\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'O CPF/Cnpj é obrigatorio!'\n                        }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label='Função'\n                    name=\"funcao\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A Função é obrigatoria!',\n                        }]}\n                >\n                    <Select>\n                        {\n                            categorias.map((cat) => {\n                                return (<Select.Option value={cat} key={cat}>{cat}</Select.Option>)\n                            })\n                        }\n                    </Select>\n                </Form.Item>\n\n                <Form.Item\n                    label='Senha'\n                    name=\"senha\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A senha é obrigatoria!'\n                        }]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item\n                    label='Confirmação'\n                    name=\"confirmSenha\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A confirmação da senha é obrigatoria!'\n                        }]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    {atualizar &&\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\">\n\n                            Atualizar\n                    </Button>\n                    }\n                    {!atualizar &&\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\">\n                            Salvar\n                    </Button>\n                    }\n                    <Button\n                        type=\"danger\"\n                        href=\"/usuarios\"\n                        style={{ marginLeft: '2px' }}\n                    >\n                        Cancelar\n                        </Button>\n                </Form.Item>\n            </Form>\n        </div>);\n    } else {\n\n        return (\n            <Form\n                {...layout}\n                name=\"basic\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                onValuesChange={onFormLayoutChange}\n                size='larger'>\n                <Form.Item\n                    label='Nome'\n                    name=\"nome\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'O nome é obrigatorio!'\n                        }]}\n                >\n                    <Input id='nomeId' />\n                </Form.Item>\n                <Form.Item\n                    label='Cpf/Cnpj'\n                    name=\"cpfCnpj\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'O CPF/Cnpj é obrigatorio!'\n                        }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label='Função'\n                    name=\"funcao\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A Função é obrigatoria!',\n                        }]}\n                >\n                    <Select>\n                        {\n                            categorias.map((cat) => {\n                                return (<Select.Option value={cat} key={cat}>{cat}</Select.Option>)\n                            })\n                        }\n                    </Select>\n                </Form.Item>\n\n                <Form.Item\n                    label='Senha'\n                    name=\"senha\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A senha é obrigatoria!'\n                        }]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item\n                    label='Confirmação'\n                    name=\"confirmSenha\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'A confirmação da senha é obrigatoria!'\n                        }]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    {atualizar &&\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\">\n\n                            Atualizar\n                    </Button>\n                    }\n                    {!atualizar &&\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\">\n                            Salvar\n                    </Button>\n                    }\n                    <Button\n                        type=\"danger\"\n                        href=\"/usuarios\"\n                        style={{ marginLeft: '2px' }}\n                    >\n                        Cancelar\n                        </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default FormUsuario;"]},"metadata":{},"sourceType":"module"}